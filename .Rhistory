source('E:/FCI/DM/Bayes/bayes.R')
View(distClass)
source('E:/FCI/DM/Bayes/bayes.R')
freq
source('E:/FCI/DM/Bayes/bayes.R')
freq <- table(distClass$class)
cl <- labels(freq[1])
cl
source('E:/FCI/DM/kmeans/kmeans.R')
set.seed(1)
x <- floor(runif(10000, min = 1, max = 1000))
set.seed(11)
y <- floor(runif(10000, min = 1, max = 1000))
set.seed(111)
z <- floor(runif(10000, min = 1, max = 1000))
set.seed(1111)
c <- floor(runif(10000, min = 1, max = 1000))
set.seed(11111)
v <- floor(runif(10000, min = 1, max = 1000))
rawData <- cbind(x,y,z,c,v)
write.csv(rawData, file = "rawData.csv")
source('E:/FCI/DM/kmeans/kmeans.R')
source('E:/FCI/DM/kmeans/kmeans.R')
View(data)
source('E:/FCI/DM/kmeans/kmeans.R')
source('E:/FCI/DM/Bayes/bayesianknearest.R')
source('E:/FCI/DM/Bayes/bayesianknearest.R')
source('E:/FCI/DM/kmeans/kmeans.R')
ptm <- proc.time()
set.seed(1)
x <- floor(runif(10000, min = 1, max = 1000))
set.seed(11)
y <- floor(runif(10000, min = 1, max = 1000))
set.seed(111)
z <- floor(runif(10000, min = 1, max = 1000))
set.seed(1111)
c <- floor(runif(10000, min = 1, max = 1000))
set.seed(11111)
v <- floor(runif(10000, min = 1, max = 1000))
rawData <- cbind(x,y,z,c,v)
View(rawData)
nrow(rawData)
c(1, 2, 3, 4 , 5)
unique(1, 2, 3 , 4 ,5)
unique(c(1,2,3,4,5))
unique(1,2,2,3,3,5)
unique(c(1,2,2,3,3,5))
d <- readline(prompt="Enter minimum distnict variables: ")
d <- as.integer(d)
k <- readline(prompt = "Enter number of Clusters: ")
k <- as.integer(k)
indices <- numeric()
for(i in 1:ncol(rawData))
{
DVs <- unique(rawData[,i])
if(length(DVs) > d)
{
indices <- c(indices, i)
}
}
data <- matrix(ncol=length(indices), nrow=nrow(rawData))
for(i in 1:length(indices))
{
data[,i] <- rawData[,indices[i]]
}
data <- as.data.frame(data)
View(data)
cents <- list()
for(i in 1:k)
{
point <- floor(runif(length(indices), max = max(data), min = min(data)))
cents <- c(cents ,list(point))
}
cents
label <- numeric()
label <- numeric()
for (i in 1:nrow(data))
{
obs <- unname(unlist(data[i,]))
#print(paste("obs",obs))
dists <- double()
minDist <- 10000000
for (j in 1:k)
{
cent <- cents[[j]]
#print(paste("cent", cent))
d <- dist(x = rbind(obs, cent), method = "manhattan")
if (d < minDist)
{
minDist <- d
lab <- j
}
}
#print(paste("dists", dists))
label <- c(label, lab)
}
data <- cbind(data, label)
View(data)
View(data)
temp <- data
View(data)
while(TRUE) {
newCents <- list()
# create new centroids
for (i in 1:k)
{
sub <- subset(data, data$label == i)
sub <- sub[,1:(ncol(data)-1)]
point <- unname(unlist(colMeans(sub)))
newCents <- c(newCents, list(point))
}
cents <- newCents
newLabel <- numeric()
for (i in 1:nrow(data))
{
obs <- unname(unlist(data[i,(1:ncol(data) - 1)]))
#print(paste("obs",obs))
#print(paste("obs",obs))
dists <- double()
minDist <- 10000000
for (j in 1:k)
{
cent <- cents[[j]]
#print(paste("cent", cent))
#print(cent)
d <- dist(x = rbind(obs, cent), method = "manhattan")
#print(d)
if (d < minDist)
{
minDist <- d
lab <- j
}
}
#print(paste("dists", dists))
newLabel <- c(newLabel, lab)
}
ori <- data$label
if(all(ori == newLabel))
{
break
} else {
data$label <- newLabel
}
#data$label <- newLabel
}
data <- data[order(data[,6]),]
colnames(data)[6] <- "cluster"
write.csv(x = data, file = "clusteredData.csv")
ptm <- proc.time() - ptm
print(paste("Processing Time in secs: ",round(ptm[[3]])))
source('E:/FCI/DM/Bayes/bayesianknearest.R')
View(df)
Ø®
o
source('E:/FCI/DM/Bayes/bayesianknearest.R')
df
source('E:/FCI/DM/Bayes/bayesianknearest.R')
source('E:/FCI/DM/kmeans/kmeans.R')
source('E:/FCI/DM/Bayes/bayesianknearest.R')
source('E:/FCI/DM/kmeans/kmeans.R')
"good morning"
install.packages("forecast")
install.packages("forecast")
install.packages("forecast")
install.packages("forecast")
library(ggplot2)
---
title: "Reproducible Research: Peer Assessment 1"
author: "Ahmed Moatasem"
output:
html_document:
keep_md: true
date: January 19, 2017
---
## Loading and preprocessing the data
* unzipping file and read data
* Date column transformation to POSIXct format for convience.
```{r, echo=TRUE}
unzip(zipfile = "activity.zip")
data <- read.csv("activity.csv")
data$date <- as.POSIXct(data$date)
```
## Mean of total number of steps taken per day
##### Total number of steps taken per day
```{r, echo=TRUE}
stepsPerDay <- tapply(data$steps, data$date, sum, na.rm = TRUE)
```
##### Histogram of the total number of steps taken each day
```{r, echo=TRUE}
library(ggplot2)
qplot(stepsPerDay, geom = "histogram", xlab = "Steps Taken Frequency Per Day",  binwidth = 1000)
```
##### Mean and Median of the total number of steps taken per day
```{r, echo=TRUE}
mean(stepsPerDay, na.rm = TRUE)
median(stepsPerDay, na.rm = TRUE)
```
## Average daily activity pattern
#### plot of averaged steps by interval
```{r, echo=TRUE}
stepsInterval <- aggregate(steps ~ interval, data, mean, na.rm = TRUE)
plot(stepsInterval$interval, stepsInterval$steps, type="l", xlab="Interval", ylab="Steps", xlim = c(0,2300))
steps_by_interval <- aggregate(steps ~ interval, data, mean)
```
#### get maximum number of steps on the averaged steps-interval
```{r, echo=TRUE}
stepsInterval[which.max(stepsInterval$steps),]
```
## Imputing missing values
#### number of rows with missing values in the dataset
```{r, echo=TRUE}
sum(!complete.cases(data))
```
#### filling missing values of steps by interval mean, and creating new filled dataset
```{r, echo=TRUE}
intervalMeans <- tapply(data$steps, data$interval, mean, na.rm = TRUE)
newData <- data
for(i in 1:nrow(newData))
{
if(is.na(newData[i,1]))
{
inter <- newData[i,3]
inter <- as.character(inter)
newData[i,1] <- intervalMeans[[inter]]
}
}
```
#### Steps taken per day new Histogram after filling NAs
```{r, echo=TRUE}
stepsAfterFill <- tapply(newData$steps, newData$date, FUN = sum)
qplot(stepsAfterFill, binwidth = 1000, xlab = "total number of steps taken each day")
```
#### new mean and median after imputting missing values
```{r, echo=TRUE}
mean(stepsAfterFill, na.rm = TRUE)
median(stepsAfterFill, na.rm = TRUE)
```
* Median and Mean are different from there original values before removing NAs.
* Affected the histogram that days with most NAs are set to 0s so they doesn't appear on the chart.
## Differences in activity patterns between weekdays and weekends
#### Factorize data by weekday and weekend
```{r, echo=TRUE}
days <- character()
for(j in 1:nrow(newData))
{
d <- weekdays(as.Date(newData[j,2]))
if(d %in% c("Saturday", "Sunday"))
{
days <- c(days, "weekend")
}else{
days <- c(days, "weekday")
}
}
newData$day <- as.factor(days)
```
#### Compare average steps on intervals between weekdays and weekends
```{r, echo=TRUE}
avgStpsIntsByDay <- aggregate(steps ~ interval + day, data=newData, mean)
ggplot(avgStpsIntsByDay, aes(interval, steps)) +
geom_line() +
facet_grid(day ~ .) +
ylab("avarage steps") +
xlab("5-min interval")
```
```{r, echo=TRUE}
unzip(zipfile = "activity.zip")
data <- read.csv("activity.csv")
data$date <- as.POSIXct(data$date)
```
unzip(zipfile = "activity.zip")
data <- read.csv("activity.csv")
data$date <- as.POSIXct(data$date)
unzip(zipfile = "activity.zip")
unzip(zipfile = "activity.zip")
setwd("E:/Data Science/Reproduciple Research/RepData_PeerAssessment1")
unzip(zipfile = "activity.zip")
data <- read.csv("activity.csv")
data$date <- as.POSIXct(data$date)
stepsPerDay <- tapply(data$steps, data$date, sum, na.rm = TRUE)
library(ggplot2)
qplot(stepsPerDay, geom = "histogram", xlab = "Steps Taken Frequency Per Day",  binwidth = 1000)
mean(stepsPerDay, na.rm = TRUE)
median(stepsPerDay, na.rm = TRUE)
stepsInterval <- aggregate(steps ~ interval, data, mean, na.rm = TRUE)
plot(stepsInterval$interval, stepsInterval$steps, type="l", xlab="Interval", ylab="Steps", xlim = c(0,2300))
steps_by_interval <- aggregate(steps ~ interval, data, mean)
stepsInterval[which.max(stepsInterval$steps),]
sum(!complete.cases(data))
intervalMeans <- tapply(data$steps, data$interval, mean, na.rm = TRUE)
newData <- data
for(i in 1:nrow(newData))
{
if(is.na(newData[i,1]))
{
inter <- newData[i,3]
inter <- as.character(inter)
newData[i,1] <- intervalMeans[[inter]]
}
}
stepsAfterFill <- tapply(newData$steps, newData$date, FUN = sum)
qplot(stepsAfterFill, binwidth = 1000, xlab = "total number of steps taken each day")
mean(stepsAfterFill, na.rm = TRUE)
median(stepsAfterFill, na.rm = TRUE)
days <- character()
for(j in 1:nrow(newData))
{
d <- weekdays(as.Date(newData[j,2]))
if(d %in% c("Saturday", "Sunday"))
{
days <- c(days, "weekend")
}else{
days <- c(days, "weekday")
}
}
newData$day <- as.factor(days)
```
avgStpsIntsByDay <- aggregate(steps ~ interval + day, data=newData, mean)
ggplot(avgStpsIntsByDay, aes(interval, steps)) +
geom_line() +
facet_grid(day ~ .) +
ylab("avarage steps") +
xlab("5-min interval")
